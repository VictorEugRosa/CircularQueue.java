public class CircularQueue<T> {
    private int top = -1;
    private int base = 0;
    private T[] data;
    private int size;

    public CircularQueue(int size) {
        data = (T[]) new Object[size];
        this.size = 0;
    }

    public void add(T item) {
        if (isFull()) {
            System.out.println("A fila está cheia.");
        } else {
            top = move(top);
            data[top] = item;
            size++;
        }
    }

    public T remove() {
        if (isEmpty()) {
            System.out.println("A fila está vazia.");
            return null;
        } else {
            T item = data[base];
            data[base] = null; // Remove 
            base = move(base);
            size--;
            if (isEmpty()) { 
                top = -1;
                base = 0;
            }
            return item;
        }
    }

    public void clear() {
        top = -1;
        base = 0;
        size = 0;
        data = (T[]) new Object[data.length];
    }

    public boolean isFull() {
        return size == data.length;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    private int move(int position) {
        return (position + 1) % data.length;
    }

    public static void main(String[] args) {
        CircularQueue<Integer> queue = new CircularQueue<>(5);

        queue.add(10);
        queue.add(20);
        queue.add(30);
        queue.add(40);
        queue.add(50);

        System.out.println(queue.remove()); // 10
        System.out.println(queue.remove()); // 20

        queue.add(60);
        queue.add(70);

        while (!queue.isEmpty()) {
            System.out.println(queue.remove());
        }
    }
}
